/**
 * Route Preview Modal Component
 * 
 * Shows route preview with map, stops, metrics, and approval/rejection buttons
 * before dispatching to driver
 */

'use client';

import React, { useState, useEffect } from 'react';
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  ModalCloseButton,
  Button,
  VStack,
  HStack,
  Text,
  Badge,
  Box,
  Divider,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  SimpleGrid,
  Alert,
  AlertIcon,
  Select,
  Textarea,
  useToast,
  Icon,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Spinner,
} from '@chakra-ui/react';
import {
  FaRoute,
  FaClock,
  FaMapMarkerAlt,
  FaPoundSign,
  FaTruck,
  FaCheckCircle,
  FaTimesCircle,
  FaExclamationTriangle,
} from 'react-icons/fa';
import { format } from 'date-fns';

interface RoutePreviewModalProps {
  isOpen: boolean;
  onClose: () => void;
  routeId?: string;
  bookingIds?: string[];
  onApprove?: (routeId: string, driverId?: string) => void;
  onReject?: (routeId: string, reason: string) => void;
  mode?: 'approval' | 'preview'; // approval = route already created, preview = create new
}

interface RoutePreviewData {
  estimatedDuration: number; // minutes
  estimatedDistance: number; // km
  totalDrops: number;
  totalValue: number; // pence
  stops: Array<{
    sequence: number;
    address: string;
    lat: number;
    lng: number;
    type: 'pickup' | 'delivery';
    estimatedTime: Date;
  }>;
  driver?: {
    id: string;
    name: string;
    currentLoad: number;
  };
  warnings: string[];
}

interface ApprovalData {
  id: string;
  routeId: string;
  status: string;
  submittedBy: string;
  submittedAt: string;
  autoGenerated: boolean;
  estimatedDuration: number;
  estimatedDistance: number;
  totalDrops: number;
  totalValue: number;
  routePreview: any;
}

export default function RoutePreviewModal({
  isOpen,
  onClose,
  routeId,
  bookingIds,
  onApprove,
  onReject,
  mode = 'preview',
}: RoutePreviewModalProps) {
  const [loading, setLoading] = useState(false);
  const [preview, setPreview] = useState<RoutePreviewData | null>(null);
  const [approval, setApproval] = useState<ApprovalData | null>(null);
  const [selectedDriver, setSelectedDriver] = useState<string>('');
  const [drivers, setDrivers] = useState<any[]>([]);
  const [rejectionReason, setRejectionReason] = useState('');
  const [isApproving, setIsApproving] = useState(false);
  const [isRejecting, setIsRejecting] = useState(false);
  const toast = useToast();

  useEffect(() => {
    if (isOpen) {
      if (mode === 'approval' && routeId) {
        loadApprovalData();
      } else if (mode === 'preview' && bookingIds?.length) {
        generatePreview();
      }
      loadAvailableDrivers();
    }
  }, [isOpen, routeId, bookingIds, mode]);

  const loadApprovalData = async () => {
    if (!routeId) return;

    setLoading(true);
    try {
      const response = await fetch('/api/admin/routing/approve');
      const data = await response.json();

      if (data.success) {
        const approval = data.data.find((a: any) => a.routeId === routeId);
        if (approval) {
          setApproval(approval);
          if (approval.routePreview) {
            setPreview(approval.routePreview);
          }
        }
      }
    } catch (error) {
      console.error('Failed to load approval data:', error);
      toast({
        title: 'Error',
        description: 'Failed to load route approval data',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const generatePreview = async () => {
    if (!bookingIds?.length) return;

    setLoading(true);
    try {
      const response = await fetch('/api/admin/routing/manual/preview', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ bookingIds }),
      });

      const data = await response.json();

      if (data.success) {
        setPreview(data.data);
      } else {
        throw new Error(data.error || 'Failed to generate preview');
      }
    } catch (error) {
      console.error('Failed to generate preview:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to generate preview',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const loadAvailableDrivers = async () => {
    try {
      const response = await fetch('/api/admin/drivers?status=active&available=true');
      const data = await response.json();

      if (data.success) {
        setDrivers(data.data || []);
      }
    } catch (error) {
      console.error('Failed to load drivers:', error);
    }
  };

  const handleApprove = async () => {
    if (!routeId) return;

    setIsApproving(true);
    try {
      if (onApprove) {
        await onApprove(routeId, selectedDriver || undefined);
      } else {
        const response = await fetch('/api/admin/routing/approve', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ routeId, driverId: selectedDriver || undefined }),
        });

        const data = await response.json();

        if (!data.success) {
          throw new Error(data.error || 'Failed to approve route');
        }
      }

      toast({
        title: 'Route Approved',
        description: 'Route has been approved and dispatched to driver',
        status: 'success',
        duration: 5000,
      });

      onClose();
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to approve route',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setIsApproving(false);
    }
  };

  const handleReject = async () => {
    if (!routeId || !rejectionReason.trim()) {
      toast({
        title: 'Error',
        description: 'Please provide a rejection reason',
        status: 'error',
        duration: 3000,
      });
      return;
    }

    setIsRejecting(true);
    try {
      if (onReject) {
        await onReject(routeId, rejectionReason);
      } else {
        const response = await fetch('/api/admin/routing/approve', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ routeId, reason: rejectionReason }),
        });

        const data = await response.json();

        if (!data.success) {
          throw new Error(data.error || 'Failed to reject route');
        }
      }

      toast({
        title: 'Route Rejected',
        description: 'Route has been rejected and released',
        status: 'success',
        duration: 5000,
      });

      onClose();
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to reject route',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setIsRejecting(false);
    }
  };

  const formatCurrency = (pence: number) => {
    return `Â£${(pence / 100).toFixed(2)}`;
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="4xl" scrollBehavior="inside">
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>
          <HStack>
            <Icon as={FaRoute} color="blue.500" />
            <Text>Route Preview & Approval</Text>
            {mode === 'approval' && approval && (
              <Badge colorScheme={approval.autoGenerated ? 'purple' : 'blue'}>
                {approval.autoGenerated ? 'Auto-Generated' : 'Manual'}
              </Badge>
            )}
          </HStack>
        </ModalHeader>
        <ModalCloseButton />

        <ModalBody>
          {loading ? (
            <HStack justify="center" py={10}>
              <Spinner size="lg" />
              <Text>Loading route preview...</Text>
            </HStack>
          ) : preview ? (
            <VStack align="stretch" spacing={6}>
              {/* Warnings */}
              {preview.warnings.length > 0 && (
                <Alert status="warning">
                  <AlertIcon />
                  <VStack align="start" spacing={1}>
                    {preview.warnings.map((warning, index) => (
                      <Text key={index} fontSize="sm">
                        {warning}
                      </Text>
                    ))}
                  </VStack>
                </Alert>
              )}

              {/* Route Metrics */}
              <SimpleGrid columns={4} spacing={4}>
                <Stat>
                  <StatLabel>
                    <HStack>
                      <Icon as={FaMapMarkerAlt} />
                      <Text>Total Stops</Text>
                    </HStack>
                  </StatLabel>
                  <StatNumber>{preview.totalDrops}</StatNumber>
                </Stat>

                <Stat>
                  <StatLabel>
                    <HStack>
                      <Icon as={FaClock} />
                      <Text>Duration</Text>
                    </HStack>
                  </StatLabel>
                  <StatNumber>{formatDuration(preview.estimatedDuration)}</StatNumber>
                </Stat>

                <Stat>
                  <StatLabel>
                    <HStack>
                      <Icon as={FaRoute} />
                      <Text>Distance</Text>
                    </HStack>
                  </StatLabel>
                  <StatNumber>{preview.estimatedDistance.toFixed(1)} km</StatNumber>
                </Stat>

                <Stat>
                  <StatLabel>
                    <HStack>
                      <Icon as={FaPoundSign} />
                      <Text>Total Value</Text>
                    </HStack>
                  </StatLabel>
                  <StatNumber>{formatCurrency(preview.totalValue)}</StatNumber>
                </Stat>
              </SimpleGrid>

              <Divider />

              {/* Route Stops */}
              <Box>
                <Text fontWeight="bold" mb={3}>
                  Route Stops
                </Text>
                <Box maxH="300px" overflowY="auto">
                  <Table size="sm" variant="simple">
                    <Thead position="sticky" top={0} bg="white" zIndex={1}>
                      <Tr>
                        <Th width="60px">#</Th>
                        <Th width="100px">Type</Th>
                        <Th>Address</Th>
                        <Th width="120px">Est. Time</Th>
                      </Tr>
                    </Thead>
                    <Tbody>
                      {preview.stops.map((stop, index) => (
                        <Tr key={index}>
                          <Td fontWeight="bold">{stop.sequence}</Td>
                          <Td>
                            <Badge
                              colorScheme={stop.type === 'pickup' ? 'blue' : 'green'}
                            >
                              {stop.type}
                            </Badge>
                          </Td>
                          <Td fontSize="sm">{stop.address}</Td>
                          <Td fontSize="sm">
                            {format(new Date(stop.estimatedTime), 'HH:mm')}
                          </Td>
                        </Tr>
                      ))}
                    </Tbody>
                  </Table>
                </Box>
              </Box>

              <Divider />

              {/* Driver Assignment */}
              <Box>
                <Text fontWeight="bold" mb={3}>
                  Assign Driver (Optional)
                </Text>
                {preview.driver ? (
                  <Alert status="info">
                    <AlertIcon />
                    <VStack align="start" spacing={0}>
                      <Text fontWeight="medium">{preview.driver.name}</Text>
                      <Text fontSize="sm">Current Load: {preview.driver.currentLoad} jobs</Text>
                    </VStack>
                  </Alert>
                ) : (
                  <Select
                    placeholder="Select driver or leave unassigned"
                    value={selectedDriver}
                    onChange={(e) => setSelectedDriver(e.target.value)}
                  >
                    {drivers.map((driver) => (
                      <option key={driver.id} value={driver.id}>
                        {driver.name} - {driver.currentJobs || 0} active jobs
                      </option>
                    ))}
                  </Select>
                )}
              </Box>

              {/* Rejection Reason (only shown when rejecting) */}
              {isRejecting && (
                <Box>
                  <Text fontWeight="bold" mb={3}>
                    Rejection Reason *
                  </Text>
                  <Textarea
                    placeholder="Why are you rejecting this route?"
                    value={rejectionReason}
                    onChange={(e) => setRejectionReason(e.target.value)}
                    rows={3}
                  />
                </Box>
              )}
            </VStack>
          ) : (
            <Alert status="error">
              <AlertIcon />
              No preview data available
            </Alert>
          )}
        </ModalBody>

        <ModalFooter>
          <HStack spacing={3}>
            <Button variant="ghost" onClick={onClose}>
              Cancel
            </Button>
            
            {mode === 'approval' && (
              <>
                <Button
                  colorScheme="red"
                  leftIcon={<FaTimesCircle />}
                  onClick={() => setIsRejecting(true)}
                  isDisabled={isApproving || !preview}
                  display={isRejecting ? 'none' : 'flex'}
                >
                  Reject
                </Button>

                {isRejecting && (
                  <Button
                    colorScheme="red"
                    leftIcon={<FaTimesCircle />}
                    onClick={handleReject}
                    isLoading={isRejecting}
                  >
                    Confirm Rejection
                  </Button>
                )}

                <Button
                  colorScheme="green"
                  leftIcon={<FaCheckCircle />}
                  onClick={handleApprove}
                  isLoading={isApproving}
                  isDisabled={isRejecting || !preview}
                >
                  Approve & Dispatch
                </Button>
              </>
            )}

            {mode === 'preview' && (
              <Button
                colorScheme="blue"
                leftIcon={<FaCheckCircle />}
                onClick={handleApprove}
                isLoading={isApproving}
                isDisabled={!preview}
              >
                Create Route
              </Button>
            )}
          </HStack>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
}

